<RibbonWindow x:Class="Samm.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:com="clr-namespace:Com.Model;assembly=Com"
        xmlns:local="clr-namespace:Samm"
        Title="ConceptMix Application" 
        x:Name="UI"
        DataContext="{Binding RelativeSource={RelativeSource Self}}"
        >

    <RibbonWindow.Resources>
        <!--
        - Multi-selection in tree view: http://stackoverflow.com/questions/459375/customizing-the-treeview-to-allow-multi-select
        - p675. Modify visual reprsentation of an item depending on property including data properties and visual properties (e.g., selected dim/set can show more information)
          - Use a data trigger. Set a property in a template depending on a property in the data object. 
            The object (like Set) has to implement INotifyPropertyChanged if the property can change and it is necessary to update the view.
            http://stackoverflow.com/questions/5010511/wpf-datatemplate-binding-depending-on-the-type-of-a-property
          - Specify value converter as a parameter of binding by implementing IValueConverter or IMultiValueConverter (for converting from multiple properties):
            <Image Source="{Binding Path=ProductImagePath, Converter={StaticResource ImagePathConverter}}"/>
            Background="{Binding Path=CategoryName, Converter={StaticResource CategoryToColorConverter}"
            This approach is good when converters are reused with other templates (say, colors, images etc.)
            http://stackoverflow.com/questions/790896/selecting-datatemplate-based-on-sub-object-type
          - p676. Use a template selector which examines the bound data object and chooses among several templates (works precisely as style selectors). 
            Derive the selector from DataTemplateSelector: http://stackoverflow.com/questions/790896/selecting-datatemplate-based-on-sub-object-type
            Can be used, for instance, to display more information for selected items like Set or Dim. 
          - p.683 Changing visual properties depending on selection property of the whole item (for expanding selected items)
        
        - How to add artificial folder by grouping special items? For example, primitive sets (in the root), identity dimensions, entity dimensions etc.
        - p.691 (ch.21) Data views for sorting, filtering items. Data source has to implement IList (e.g. ObservableCollection), IBindingList or IEnumerable (bad, low performance).
          - Using flags/properties for choosing what to visualize: visualize also lesser (incoming) dimensions, visualize also dimension expansion (expand dimension range set), show only identity dims or only entity dims etc.
          - Custom sorting. One general way is to implement binding properties specially for visualization purposes which will return what is needed for the tree view (and other controls) taking into account flags, filters, properties, dedicated folders for special elements etc.
        - Putting nodes of one kind in a separate folder (say, primitive sets, subsets, identity/entity dimensions etc.)
          - Different types of dimensions (identity/entiy/greater/lesser etc.) either hide or in separate folders 
          Solution: http://www.codeproject.com/Articles/36451/Organizing-Heterogeneous-Data-on-a-WPF-TreeView
          http://stackoverflow.com/questions/2248346/grouping-child-objects-in-wpf-treeview
          Alternative solution: http://www.zagstudio.com/blog/365#.Ufgt3W1Enmg  http://www.zagstudio.com/blog/367#.UfguTm1Enmg
        
            // Criteria to the tree view: 
            // - Conditional visualization (item rendering):
            //   - Primitive concepts either not visualized or visualized in a separate folder (also other kinds of folders either with special class or with special properties)
            //   - Dimension structure visualized (so we need to anayze the identity tree) -> Use multibinding by expanding dimension items (only identities up to the primitive sets)
            //   - Alligning various elements of items across the whole tree like in a table, say, names could be alligned (although it might not be possible for deep children)
            //   - TreeView header (it is probably needed only if we have allignment).
            // - The root (SetRoot) is either shown or hidden so that its direct child sets are listed in tree view at the very first level
            // - Touchable actions: context menu, drag-n-drop, DnD icon changing its appearance depending on the drop area, scrolling etc.
            // - Visualizations: animations during actions (touching, DnD), pitching, external events like process updates or property changes etc. 
            // - Selection and highlighting: multi-selection (including via touch), conditional selection when not all combinations are possible (with warning animation or other visualization). 
            // - Getting unique representation for a (selected or arbitrary) item visualized by a tree item (dim id, set id etc. including root)
-->

        <local:CompositeCollectionConverter x:Name="SubConv" x:Key="SubConv" />

        <!-- Data template to display items of class Set (no matter where they appear in this window) -->
        <HierarchicalDataTemplate DataType="{x:Type com:Set}">
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Path=IsPrimitive}" Value="true">
                    <Setter Property="TreeViewItem.Foreground" Value="Red"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
            <HierarchicalDataTemplate.ItemsSource>
                <MultiBinding  Converter="{StaticResource SubConv}">
                    <Binding Path="SubSets"/>
                    <Binding Path="GreaterDims"/>
                </MultiBinding>
            </HierarchicalDataTemplate.ItemsSource>
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding Path=Name}" />
            </StackPanel>
        </HierarchicalDataTemplate>

        <!-- Data template to display items of class Dim (no matter where they appear in this window) -->
        <DataTemplate DataType="{x:Type com:Dim}">
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Path=IsIdentity}" Value="true">
                    <Setter Property="TreeViewItem.Foreground" Value="Red"></Setter>
                </DataTrigger>
            </DataTemplate.Triggers>
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding Path=Name}" Foreground="Blue"/>
                <TextBlock Text=" : " Width="10"/>
                <TextBlock Text="{Binding Path=GreaterSet.Name}"/>
                <TextBlock Text=" : " Width="10"/>
                <TextBlock Text="{Binding Path=IsIdentity}"/>
            </StackPanel>
        </DataTemplate>

        <!-- Grid for visualizing a set -->
        <Style x:Key="GridHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="FontSize" Value="12" />
        </Style>

        <Style x:Key="ReadOnlyGridStyle" TargetType="{x:Type DataGrid}" >
            <Setter Property="AutoGenerateColumns" Value="False" />
            <Setter Property="IsReadOnly" Value="True" />
            <Setter Property="GridLinesVisibility" Value="None" />
            <Setter Property="CanUserAddRows" Value="False" />
            <Setter Property="CanUserDeleteRows" Value="False" />
            <Setter Property="CanUserResizeColumns" Value="True" />
            <Setter Property="CanUserResizeRows" Value="False" />
            <Setter Property="CanUserReorderColumns" Value="True" />
            <Setter Property="ColumnHeaderStyle" Value="{StaticResource GridHeaderStyle}" />
        </Style>

        <DataTemplate x:Key="CellTemplate">
            <Border Padding="3" Background="Purple">
                <TextBox Text="{Binding Path=.}" />
            </Border>
        </DataTemplate>

    </RibbonWindow.Resources>

    <DockPanel LastChildFill="False">

        <Ribbon x:Name="RibbonWin" DockPanel.Dock="Top" SelectedIndex="0">

            <!-- Help Pane, located at the right-hand side -->
            <Ribbon.HelpPaneContent>
                <RibbonButton SmallImageSource="Images\help.png" />
            </Ribbon.HelpPaneContent>

            <!-- Quick Access Toolbar - located at the upper-left corner -->
            <Ribbon.QuickAccessToolBar>
                <RibbonQuickAccessToolBar>
                    <RibbonButton x:Name ="Save" SmallImageSource="Images\default.png" />
                    <RibbonSplitButton x:Name ="Undo" SmallImageSource="Images\default.png">
                        <RibbonSplitMenuItem Header="Undo 1" />
                        <RibbonSplitMenuItem Header="Undo 2" />
                        <RibbonSplitMenuItem Header="Undo 3" />
                    </RibbonSplitButton>
                    <RibbonSplitButton x:Name="Redo" SmallImageSource="Images\default.png" >
                        <RibbonSplitMenuItem Header="Redo 1" />
                        <RibbonSplitMenuItem Header="Redo 2" />
                    </RibbonSplitButton>
                </RibbonQuickAccessToolBar>
            </Ribbon.QuickAccessToolBar>

            <!-- Application Menu, located at the left-hand side (down arrow) -->
            <Ribbon.ApplicationMenu>
                <RibbonApplicationMenu KeyTip="F">
                    <RibbonApplicationMenuItem Header="New" ImageSource="Images\default.png" Command="New"/>
                    <RibbonApplicationMenuItem Header="Open" ImageSource="Images\default.png" Command="Open"/>
                    <RibbonApplicationMenuItem Header="Close" ImageSource="Images\default.png" Command="Close"/>
                    <RibbonApplicationMenuItem Header="Save" ImageSource="Images\default.png" Command="Save"/>
                    <RibbonApplicationMenuItem Header="Save As..." ImageSource="Images\default.png" Command="SaveAs"/>
                    <RibbonApplicationMenuItem Header="Options" ImageSource="Images\default.png" />
                    <RibbonApplicationMenuItem Name="aboutMenu" Header="About" ImageSource="Images\default.png" Click="aboutMenu_Click" />
                    <RibbonApplicationMenuItem Header="Exit" ImageSource="Images\default.png" />
                </RibbonApplicationMenu>
            </Ribbon.ApplicationMenu>

            <!-- Ribbon Tab Home/File -->
            <RibbonTab Header="Home" KeyTip="H" >
                <!-- Home  group-->
                <RibbonGroup x:Name="ClipboardGroup" Header="Home">
                    <RibbonMenuButton LargeImageSource="Images\paste.png" Label="Paste" KeyTip="V">
                        <RibbonMenuItem ImageSource="Images\paste.png" Header="Keep Text Only" KeyTip="T"/>
                        <RibbonMenuItem ImageSource="Images\paste.png" Header="Paste Special..." KeyTip="S"/>
                    </RibbonMenuButton>
                    <RibbonButton SmallImageSource="Images\cut.png" Label="Cut" KeyTip="X" />
                    <RibbonButton SmallImageSource="Images\copy.png" Label="Copy" KeyTip="C" />
                    <RibbonButton SmallImageSource="Images\default.png" Label="Format Painter" KeyTip="FP" />
                </RibbonGroup>
            </RibbonTab>

            <!-- Ribbon Tab View -->
            <RibbonTab Header="View" KeyTip="V">
                <RibbonButton SmallImageSource="Images\default.png" Label="Window" KeyTip="W" />
            </RibbonTab>

            <!-- Ribbon Tab Data Source -->
            <RibbonTab Header="Data Source" KeyTip="D">
                <RibbonButton Name="accessDataSourceMenu" SmallImageSource="Images\default.png" Label="Access Database" KeyTip="A" Click="accessDataSourceMenu_Click"/>
                <RibbonButton Name="sqlServerDataSourceMenu" SmallImageSource="Images\default.png" Label="SQL Server" KeyTip="X"  Click="sqlServerDataSourceMenu_Click"/>
                <RibbonButton Name="removeDataSource" SmallImageSource="Images\default.png" Label="Remove Data Source" KeyTip="R"/>
                <RibbonButton Name="searchDataSource" SmallImageSource="Images\default.png" Label="Search Data Source" KeyTip="S"/>
            </RibbonTab>

            <!-- Ribbon Tab Insert -->
            <RibbonTab Header="Insert" KeyTip="W">
                <RibbonGroup x:Name="tableMenuGroup" Header="Tables">
                    <RibbonButton Name="importTableInsertMenu" SmallImageSource="Images\default.png" Label="Import Table" KeyTip="I" Click="importTableInsertMenu_Click" />
                    <RibbonButton SmallImageSource="Images\default.png" Label="Add Filtered Table" KeyTip="F" />
                    <RibbonButton SmallImageSource="Images\default.png" Label="Remove Table" KeyTip="R" />
                </RibbonGroup>
                <RibbonGroup x:Name="columnMenuGroup" Header="Columns">
                    <RibbonButton Name="addAggregationAttributeMenu" SmallImageSource="Images\default.png" Label="Add Aggregation Column" KeyTip="A" Click="addAggregationAttributeMenu_Click" />
                    <RibbonButton SmallImageSource="Images\default.png" Label="Add Some Other Attribute" KeyTip="X" />
                </RibbonGroup>
            </RibbonTab>

        </Ribbon>

        <StatusBar DockPanel.Dock="Bottom">
            <StatusBarItem>
                <TextBlock Name="statBarText" Text="Ready"/>
            </StatusBarItem>
        </StatusBar>

        <Grid>
            <!-- Define the rows and columns -->
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="200" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="600" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="200" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <GridSplitter Grid.Column ="1" Width ="5" ResizeDirection="Columns" VerticalAlignment="Stretch" HorizontalAlignment="Center" Background ="AliceBlue" />
            <GridSplitter Grid.Column ="3" Width ="5" ResizeDirection="Columns" VerticalAlignment="Stretch" HorizontalAlignment="Center" Background ="AliceBlue" />

            <StackPanel Name="DsPanel" Grid.Column="0" VerticalAlignment="Stretch">
                <Label Name="lblDatasources" FontSize="16" Margin="10,10,0,0" >Data sources</Label>

                <!-- Data source panel -->
                <TreeView Name="DsView" 
                          BorderThickness="0" 
                          ScrollViewer.HorizontalScrollBarVisibility="Hidden" 
                          ItemsSource="{Binding DsModel}"
                          MouseDoubleClick="MashupView_MouseDoubleClick"
                          >
                </TreeView>
            </StackPanel>

            <!-- Workspace panel -->
            <StackPanel Name="WorkspacePanel" Grid.Column="2" >
                <Label Name="lblWorkspace" FontSize="16" Margin="10,10,0,0">WORKSPACE PANEL</Label>
                <StackPanel Name="GridPanel">
                </StackPanel>
            </StackPanel>

            <!-- Mashup panel -->
            <StackPanel Name="MashupPanel" Grid.Column="4" VerticalAlignment="Stretch">
                <Label Name="lblMashup" FontSize="16" Margin="10,10,0,0" >MASHUP</Label>

                <!-- Data source panel -->
                <TreeView Name="MashupView" 
                          BorderThickness="0" 
                          ScrollViewer.HorizontalScrollBarVisibility="Hidden" 
                          ItemsSource="{Binding MashupModel}"
                          MouseDoubleClick="MashupView_MouseDoubleClick"
                          >
                </TreeView>
            </StackPanel>

        </Grid>

    </DockPanel>
</RibbonWindow>
